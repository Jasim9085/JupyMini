# This is a basic workflow to help you get started with building your Android app.
name: Android CI Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # 1. Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up JDK 21, which is required for AGP 8.x
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin' # A popular, trusted OpenJDK distribution
          cache: 'gradle'

      # 3. Set up Python 3.11. This is the crucial step.
      # The action will install Python and expose its location.
      - name: Set up Python 3.11
        id: setup-python # Give this step an ID so we can reference its output
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 4. Grant execute permission for gradlew
      # This is a common required step on Linux runners.
      - name: Grant Gradlew executable permissions
        run: chmod +x ./gradlew

      # 5. Build with Gradle. This is where the magic happens.
      - name: Build with Gradle
        run: ./gradlew build -PchaquopyBuildPython=${{ steps.setup-python.outputs.python-path }}

      # 6. (Optional) Upload the build artifact (the APK)
      # This saves the generated APK so you can download it from the workflow run page.
      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: apk-debug
          path: app/build/outputs/apk/debug/app-debug.apk
